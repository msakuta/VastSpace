Index: gltestplus.cpp
===================================================================
--- gltestplus.cpp	(revision 42)
+++ gltestplus.cpp	(revision 43)
@@ -90,7 +90,45 @@
 	const Astrobj *sun = pl.cs->findBrightest(pl.pos);
 	glEnable(GL_LIGHTING);
 	glEnable(GL_LIGHT0);
+#if 0
+	// Highly optimized version of light source normalization & conversion to float array[4].
+	// It emits 182 bytes of codes as a whole function while non-assembler version yields 237.
+	// The use of register stack reminds me of PostScript hand-writing I have used to.
+	if(sun){
+		Vec3d pos = pl.cs->tocs(vec3_000, sun);
+		_asm{
+			lea eax,pos
+			fld qword ptr[eax+16]  // z
+			fld qword ptr[eax+8]   // y z
+			fld qword ptr[eax+0]   // x y z
+			fmul st(0),st          // x^2 y z
+			fld st(1)              // y x^2 y z
+			fmul st,st(2)          // y^2 x^2 y z
+			faddp st(1),st         // x^2+y^2 y z
+			fld st(2)              // z x^2+y^2 y z
+			fmul st,st(3)          // z^2 x^2+y^2 y z
+			faddp st(1),st         // x^2+y^2+z^2 y z
+			fsqrt                  // sqrt(x^2+y^2+z^2) y z
+			fld1                   // 1 sqrt(x^2+y^2+z^2) y z
+			fdivrp st(1),st        // 1/sqrt(x^2+y^2+z^2) y z
+			fld st(0)              // 1/sqrt(x^2+y^2+z^2) 1/sqrt(x^2+y^2+z^2) y z
+			fmul qword ptr[eax]    // x/sqrt(x^2+y^2+z^2) 1/sqrt(x^2+y^2+z^2) y z
+			fstp dword ptr[eax]    // 1/sqrt(x^2+y^2+z^2) y z
+			fld st(0)              // 1/sqrt(x^2+y^2+z^2) 1/sqrt(x^2+y^2+z^2) y z
+			fmulp st(2),st         // 1/sqrt(x^2+y^2+z^2) y/sqrt(x^2+y^2+z^2) z
+			fmulp st(2),st         // y/sqrt(x^2+y^2+z^2) z/sqrt(x^2+y^2+z^2)
+			fstp dword ptr[eax+4]  // z/sqrt(x^2+y^2+z^2)
+			fstp dword ptr[eax+8]
+			xor ecx,ecx
+			mov dword ptr[eax+12],ecx
+		}
+		glLightfv(GL_LIGHT0, GL_POSITION, (GLfloat*)&pos);
+	}
+	else
+		glLightfv(GL_LIGHT0, GL_POSITION, light_pos);
+#else
 	glLightfv(GL_LIGHT0, GL_POSITION, sun ? Vec4<GLfloat>(pl.cs->tocs(vec3_000, sun).normin().cast<GLfloat>()) : light_pos);
+#endif
 }
 
 static void cslist(const CoordSys *root, double &y){
@@ -265,12 +303,12 @@
 	glClearDepth(1.);
 	glClearColor(0,0,0,1);
 	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
+	glPolygonMode(GL_FRONT_AND_BACK, gl_wireframe ? GL_LINE : GL_FILL);
 	glPushMatrix();
 	glMultMatrixd(vw.rot);
 	GLcull glc = GLcull(vw.fov, vw.pos, vw.irot, 1. / 1e3, 1e10);
 	vw.gc = &glc;
 	glPushAttrib(GL_CURRENT_BIT | GL_TEXTURE_BIT | GL_ENABLE_BIT | GL_POLYGON_BIT);
-	glPolygonMode(GL_FRONT_AND_BACK, gl_wireframe ? GL_LINE : GL_FILL);
 	glDisable(GL_CULL_FACE);
 	glColor4f(1,1,1,1);
 	glEnable(GL_BLEND);
@@ -298,6 +336,7 @@
 	glPopAttrib();
 	glPopMatrix();
 
+	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
 	glPushAttrib(GL_CURRENT_BIT | GL_TEXTURE_BIT | GL_ENABLE_BIT);
 	glPushMatrix();
 	glDisable(GL_LIGHTING);
