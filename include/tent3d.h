/** \file
 * \brief Definition of Temporary Entity system.
 *
 * Temporary Entities are generated by visual effects such as explosion,
 * fire, bullet tracer or ricochet.  Once generated, Temporary Entities
 * decay over time and eventually automatically deallocated.
 * This system is not advanced particle system.
 *
 * There are currently two flavors of Temporary Entities: Teline and Tefpol.
 * Teline stands for Temporary Entity LINE.  It's meant to be simple straight
 * line shaped effect, but can express anything like single particle.
 * Tefpol stands for Temporary Entity Follow POLyline.  It follows some
 * non-temporary Entities and generates tracers by placing vertices of the
 * polylines in some interval.  Best suitable to projectile or missile tracers.
 *
 * The system's names are occasionally suffixed with 3D because it's originally
 * a module for 2-Dimensional graphics, but it's getting to feel verbose.
 *
 */

#ifndef TENT3D_H
#define TENT3D_H

#include "tent3d_forward.h"

#ifdef __cplusplus
extern "C"{
#endif
#include <clib/colseq/color.h>
#include <clib/colseq/cs.h>
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
#include <cpplib/vec3.h>
#include <cpplib/mat4.h>
#include <cpplib/quat.h>
#include <cpplib/gl/cullplus.h>
#endif
#ifndef NPROFILE
#include <stddef.h>
#endif
#include "export.h"

typedef unsigned long tent3d_flags_t;

/* teline_flags_t */
#define TEL3_HEADFORWARD (1<<1) /* the line will head towards its velocity. omg now means angle offset. */
#define TEL3_VELOLEN     (1<<2) /* set length by its velocity. len now means factor. */
#define TEL3_SHRINK      (1<<4) /* shrink length as its life decreases */
#define TEL3_REFLECT     (1<<5) /**< Obsolete; no effect now */
#define TEL3_INVROTATE   (1<<6) /* perform inverse rotation by a given matrix for billboard effect */
#define TEL3_THICK       (1<<7) /* line draws thick */
#define TEL3_NOLINE      (1<<8) /**< Obsolete; no effect now */

/* The bit 11 through 15 are reserved for predefined Teline3 form specifier.
 * This mechanism is already obsolete since any form can be achieved by inheriting Teline3.
 * It's just left for backward compatibility.  We're going to delete all forms flags eventually.
 * FORM1 through FORM4 were registered for shapes in 2-dimension only and no longer used.
 */
#define TEL3_FORM1        (1<<11)
#define TEL3_FORM2        (2<<11)
#define TEL3_FORM3        (3<<11)
#define TEL3_FORM4        (4<<11)
#define TEL3_CYLINDER     (5<<11) /* kind of shockwave */
#define TEL3_FORM5        (6<<11)
#define TEL3_EXPANDISK    (7<<11) /* expanding disk */
#define TEL3_STATICDISK   (8<<11)
#define TEL3_CALLBACK     (9<<11) /* call a given function pointer to draw; be careful on using this */
#define TEL3_GLOW         (10<<11) /* glowing effect sprite */
#define TEL3_EXPANDGLOW   (11<<11) /* growing glow */
#define TEL3_SPRITE       (12<<11) /* glowing effect sprite */
#define TEL3_EXPANDTORUS  (13<<11) /* glowing effect sprite */
#define TEL3_FORM14       (14<<11)
#define TEL3_FORM15       (15<<11)
/* End of forms definition */

#define TEL3_RANDOMCOLOR  (1<<16)
#define TEL3_NEAR         (1<<17) /* draw the line a little nearer than it actually is, to prevent race condition of decals. */
#define TEL3_FADEEND      (1<<18) /* fade the tail to make it look smoother. */
#define TEL3_HALF         (1<<19) /* center point means one of the edges of the line */
#define TEL3_QUAT         (1<<20) /* use quaternion to express rotation */
#define TEL3_HITFUNC      (1<<21) /* use w->vft->pointhit to determine intersection into ground */
#define TEL3_ACCELFUNC    (1<<22) /* use w->vft->accel to determine gravity */



#ifdef __cplusplus

struct glcull;

namespace tent3d{

/// \brief Basic set of variables that all Teline3 classes share.
struct Teline3ConstructInfo{
	Vec3d pos; ///< Position vector of center point
	Vec3d velo; ///< Velocity vecotr
	double len; ///< Length of the beam
	Quatd rot; ///< Rotation in quaternion
	Vec3d omg; ///< Angle velocity vector
	double life; ///< Remaining rendering time
	Vec3d grv; ///< Gravity effect factor
	tent3d_flags_t flags; ///< Option flags
};

/// \brief Base class of Telines.
///
/// If you want to create Teline with custom behavior, derive this class,
/// override virtual functions and use placement new syntax with Teline3List
/// as the parameter to the new operator.
struct EXPORT Teline3 : Teline3ConstructInfo{
	Teline3();
	Teline3(const Teline3ConstructInfo &);
	virtual ~Teline3();
	virtual bool update(double dt);
	virtual void draw(const Teline3DrawData&)const;
};

typedef Teline3ConstructInfo Teline3CallbackData;

/// \brief The context data set for drawing Telines.
struct Teline3DrawData{
	Vec3d viewpoint, viewdir;
	Quatd rot;
	Mat4d invrot;
	double fov; ///< field of view

	/* following are trivial members; caller need not to set them */
	GLcull *pgc;
};

EXPORT Teline3List *NewTeline3D(unsigned maxt, unsigned init, unsigned unit); /* constructor */
EXPORT Teline3List *NewTeline3DFunc(unsigned maxt, unsigned init, unsigned unit, struct war_field*); /* constructor */
EXPORT void DelTeline3D(Teline3List *); /* destructor */
EXPORT void AddTeline3D(Teline3List *tell, const Vec3d &pos, const Vec3d &velo, double len, const Quatd &rot, const Vec3d &omg, const Vec3d &grv, COLOR32 col, tent3d_flags_t flags, float life);
EXPORT void AddTelineCallback3D(Teline3List *tell, const Vec3d &pos, const Vec3d &velo, double len, const Quatd &rot, const Vec3d &omg, const Vec3d &grv, void (*draw_proc)(const Teline3CallbackData*, const Teline3DrawData*, void *private_data), void *private_data, tent3d_flags_t flags, float life);
EXPORT void AnimTeline3D(Teline3List *tell, double dt);
EXPORT void DrawTeline3D(Teline3List *tell, Teline3DrawData *);
}
using namespace tent3d;

/// \brief Placement new for Teline3-derived classes that are allocated inside Teline3List.
EXPORT void *operator new(size_t size, Teline3List &a);

#endif


#ifndef NPROFILE
struct tent3d_line_debug{
	double drawteline;
	size_t so_teline3_t;
	unsigned teline_c;
	unsigned teline_m;
	unsigned teline_s;
};
const struct tent3d_line_debug *Teline3DDebug(const Teline3List *);
#endif


#endif
